[{"/Users/ys/Documents/grid-trading/src/index.js":"1","/Users/ys/Documents/grid-trading/src/reportWebVitals.js":"2","/Users/ys/Documents/grid-trading/src/App.js":"3","/Users/ys/Documents/grid-trading/src/connect.js":"4","/Users/ys/Documents/grid-trading/src/Box.js":"5","/Users/ys/Documents/grid-trading/src/Button.js":"6","/Users/ys/Documents/grid-trading/src/LimitForm.js":"7","/Users/ys/Documents/grid-trading/src/ChartBox.js":"8","/Users/ys/Documents/grid-trading/src/api.js":"9","/Users/ys/Documents/grid-trading/src/ResultPage.js":"10","/Users/ys/Documents/grid-trading/src/WaitBuyBox.js":"11","/Users/ys/Documents/grid-trading/src/WaitSellBox.js":"12","/Users/ys/Documents/grid-trading/src/DoneBox.js":"13"},{"size":642,"mtime":1656000022758,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1653618380654,"results":"16","hashOfConfig":"15"},{"size":664,"mtime":1655999294574,"results":"17","hashOfConfig":"15"},{"size":3004,"mtime":1656006000106,"results":"18","hashOfConfig":"15"},{"size":763,"mtime":1655974082595,"results":"19","hashOfConfig":"15"},{"size":251,"mtime":1655869984542,"results":"20","hashOfConfig":"15"},{"size":4316,"mtime":1656012810405,"results":"21","hashOfConfig":"15"},{"size":2481,"mtime":1656009129001,"results":"22","hashOfConfig":"15"},{"size":1326,"mtime":1656010172552,"results":"23","hashOfConfig":"15"},{"size":476,"mtime":1656004810212,"results":"24","hashOfConfig":"15"},{"size":202,"mtime":1656002112746,"results":"25","hashOfConfig":"15"},{"size":205,"mtime":1656002302844,"results":"26","hashOfConfig":"15"},{"size":194,"mtime":1656004003689,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1oufsji",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ys/Documents/grid-trading/src/index.js",["73"],[],"/Users/ys/Documents/grid-trading/src/reportWebVitals.js",[],[],[],"/Users/ys/Documents/grid-trading/src/App.js",[],[],"/Users/ys/Documents/grid-trading/src/connect.js",["74","75","76","77","78"],[],"import { useState } from \"react\";\n\n// let socket; // 소켓\n\n// 웹소켓 연결\nfunction CreatSocketConnection(type, conncectType, dataMaker) {\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`;\n  let payload = 0;\n  const [data, setData] = useState(\"\");\n  let socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n  socket.binaryType = \"arraybuffer\";\n\n  socket.onopen = () => {\n    //console.log(\"?\");\n    socket.send(\n      JSON.stringify([\n        { ticket: \"UNIQUE_TICKET\" },\n        { type: \"ticker\", codes: [\"KRW-BTC\"] }, // \"KRW-BTC\",\"KRW-ETH\" -> parsing\n        { type: \"orderbook\", codes: [\"KRW-BTC\"] },\n        { type: \"trade\", codes: [\"KRW-BTC\"] },\n      ])\n    );\n  };\n\n  socket.onmessage = (e) => {\n    //console.log(\"message\");\n    var enc = new TextDecoder(\"utf-8\");\n    var arr = new Uint8Array(e.data);\n    var str_d = enc.decode(arr);\n    var d = JSON.parse(str_d);\n    if (d.type === \"ticker\") {\n      // 현재가 데이터\n      setData(d.trade_price);\n      // TOD\n      //console.log(d.opening_price);\n      // payload = d.opening_price;\n    }\n    if (d.type == \"orderbook\") {\n      // 호가 데이터\n      // TODO\n    }\n    if (d.type == \"trade\") {\n      // 체결 데이터\n      // TODO\n    }\n  };\n  socket.onerror = (e) => {\n    console.log(e);\n  };\n  return (\n    <div>\n      <h1>{data}</h1>\n    </div>\n  );\n}\n\n//   return () => (dispatch, getState) => {\n//     let socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n//     socket.binaryType = \"arraybuffer\";\n\n//     //socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n//     //socket.binaryType = \"arraybuffer\";\n\n//     socket.onopen = () => {\n//       console.log(\"?\");\n//       socket.send(\n//         JSON.stringify([\n//           { ticket: \"UNIQUE_TICKET\" },\n//           { type: \"ticker\", codes: [\"KRW-BTC\"] }, // \"KRW-BTC\",\"KRW-ETH\" -> parsing\n//           { type: \"orderbook\", codes: [\"KRW-BTC\"] },\n//           { type: \"trade\", codes: [\"KRW-BTC\"] },\n//         ])\n//       );\n//     };\n\n//     socket.onclose = function (e) {\n//       socket = undefined;\n//     };\n\n//     socket.onmessage = (e) => {\n//       console.log(\"?\");\n//       var enc = new TextDecoder(\"utf-8\");\n//       var arr = new Uint8Array(e.data);\n//       var str_d = enc.decode(arr);\n//       var d = JSON.parse(str_d);\n//       const state = getState();\n//       if (d.type == \"ticker\") {\n//         dispatch({ type: SUCCESS, payload: state });\n//         // 현재가 데이터\n//         // TOD\n//         console.log(\"yay\");\n//       }\n//       if (d.type == \"orderbook\") {\n//         // 호가 데이터\n//         // TODO\n//       }\n//       if (d.type == \"trade\") {\n//         // 체결 데이터\n//         // TODO\n//       }\n//     };\n//     socket.onerror = (e) => {\n//       dispatch({ type: ERROR, payload: e });\n//     };\n//   };\n\n// function closeWS() {\n//   if (socket != undefined) {\n//     socket.close();\n//     socket = undefined;\n//   }\n// }\n\nexport default CreatSocketConnection;\n","/Users/ys/Documents/grid-trading/src/Box.js",["79","80"],[],"import \"./Box.css\";\nimport Button from \"./Button\";\nimport LimitForm from \"./LimitForm\";\nimport { test } from \"./api\";\nimport { useState } from \"react\";\n\nfunction Box() {\n  const startTrade = () => {};\n  const [items, setItems] = useState([]);\n  const handleCreateSuccess = (newItem) => {\n    setItems((prevItems) => [newItem, ...prevItems]);\n  };\n  return (\n    <div className=\"Box\">\n      <h1 className=\"Box-heading\">Arithmetic</h1>\n      <div className=\"Content App-box\">\n        <div className=\"Content-inner\">\n          <div className=\"LimitForm\">\n            <LimitForm onSubmit={test} onSubmitSuccess={handleCreateSuccess} />\n          </div>\n        </div>\n      </div>\n      <Button className=\"start\">Start</Button>\n    </div>\n  );\n}\n\nexport default Box;\n","/Users/ys/Documents/grid-trading/src/Button.js",[],[],"/Users/ys/Documents/grid-trading/src/LimitForm.js",["81"],[],"/Users/ys/Documents/grid-trading/src/ChartBox.js",["82","83","84","85","86","87"],[],"import ApexCharts from \"apexcharts\";\nimport { useEffect, useState } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\n// import { ChartDraw } from \"./api\";\nimport ChartDraw from \"./api\";\n\nconst INITIAL_VALUES = {\n  random: {\n    candle_date_time_kst: \"2018-04-18T19:16:00\",\n    low_price: 90,\n    high_price: 100,\n    opening_price: 0,\n    trade_price: 70,\n  },\n};\n\nfunction DateConvert(date) {\n  let tmp = new Date(date);\n  const utc = tmp.getTime() + tmp.getTimezoneOffset() * 60 * 1000;\n  const KR_TIME_DIFF = 9 * 60 * 60 * 1000;\n  const kr_curr = new Date(utc + KR_TIME_DIFF);\n  return kr_curr;\n}\n\nfunction ChartBox(initialValues = INITIAL_VALUES) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingError, setLoadingError] = useState(null);\n  const [dataTest, setDataTest] = useState([{ initialValues }]);\n  const data = [\n    {\n      time_close: \"2018-04-18T19:16:00\",\n      open: 8615000,\n      high: 8618000,\n      low: 8611000,\n      close: 8611000,\n    },\n  ];\n\n  const asyncTest = async () => {\n    const options = { method: \"GET\", headers: { Accept: \"application/json\" } };\n    fetch(\n      \"https://api.upbit.com/v1/candles/minutes/1?market=KRW-BTC&count=30\",\n      options\n    )\n      .then((response) => response.json())\n      .then((result) => {\n        console.log(result);\n        setDataTest(result);\n      })\n      .catch((err) => console.error(err));\n    console.log(dataTest);\n  };\n\n  useEffect(() => {\n    asyncTest();\n  }, []);\n\n  return (\n    <div style={{ width: 550 }}>\n      {loadingError && <p>{loadingError.message}</p>}\n      <ReactApexChart\n        type=\"candlestick\"\n        options={{\n          tooltip: {\n            theme: \"dark\",\n          },\n          // theme: {\n          //   mode: \"dark\",\n          // },\n          chart: { type: \"candlestick\", width: 550 },\n          xaxis: {\n            type: \"datetime\",\n            categories: data?.map((price) =>\n              DateConvert(price.candle_date_time_kst)\n            ),\n          },\n        }}\n        series={[\n          {\n            data: dataTest?.map((price) => {\n              return [\n                // DateConvert(price.candle_date_time_kst),\n                Date.parse(price.candle_date_time_kst),\n                price.opening_price,\n                price.high_price,\n                price.low_price,\n                price.trade_price,\n              ];\n            }),\n          },\n        ]}\n      />\n    </div>\n  );\n}\n\nexport default ChartBox;\n",[],"/Users/ys/Documents/grid-trading/src/api.js",["88","89","90"],[],"import { useEffect, useState } from \"react\";\n\nexport async function test(formData) {\n  const options = { method: \"GET\", headers: { Accept: \"application/json\" } };\n  console.log(\"api뭐야\");\n  let body;\n  const response = await fetch(\n    \"https://api.upbit.com/v1/candles/minutes/1?market=KRW-BTC&count=1\",\n    options\n  )\n    .then((response) => response.json())\n    .catch((err) => console.error(err));\n\n  // console.log(body);\n  // const body = await response.json();\n  return body;\n}\n\n// export default function ChartDraw() {\n//   const [data, setData] = useState([]);\n\n//   console.log(\"api뭐야\");\n//   useEffect(() => {\n//     const options = { method: \"GET\", headers: { Accept: \"application/json\" } };\n//     fetch(\n//       \"https://api.upbit.com/v1/candles/minutes/1?market=KRW-BTC&count=3\",\n//       options\n//     )\n//       .then((response) => response.json())\n//       .then((result) => setData(result));\n//   }, []);\n\n//   console.log(data);\n//   return data;\n// }\nexport async function ChartDraw() {\n  const options = { method: \"GET\", headers: { Accept: \"application/json\" } };\n\n  fetch(\n    \"https://api.upbit.com/v1/candles/minutes/1?market=KRW-BTC&count=1\",\n    options\n  )\n    .then((response) => response.json())\n    .then((response) => console.log(response))\n    .catch((err) => console.error(err));\n}\n","/Users/ys/Documents/grid-trading/src/ResultPage.js",[],[],"/Users/ys/Documents/grid-trading/src/WaitBuyBox.js",[],[],"/Users/ys/Documents/grid-trading/src/WaitSellBox.js",[],[],"/Users/ys/Documents/grid-trading/src/DoneBox.js",[],[],{"ruleId":"91","severity":1,"message":"92","line":5,"column":8,"nodeType":"93","messageId":"94","endLine":5,"endColumn":29},{"ruleId":"91","severity":1,"message":"95","line":7,"column":9,"nodeType":"93","messageId":"94","endLine":7,"endColumn":16},{"ruleId":"91","severity":1,"message":"96","line":8,"column":9,"nodeType":"93","messageId":"94","endLine":8,"endColumn":14},{"ruleId":"91","severity":1,"message":"97","line":9,"column":7,"nodeType":"93","messageId":"94","endLine":9,"endColumn":14},{"ruleId":"98","severity":1,"message":"99","line":39,"column":16,"nodeType":"100","messageId":"101","endLine":39,"endColumn":18},{"ruleId":"98","severity":1,"message":"99","line":43,"column":16,"nodeType":"100","messageId":"101","endLine":43,"endColumn":18},{"ruleId":"91","severity":1,"message":"102","line":8,"column":9,"nodeType":"93","messageId":"94","endLine":8,"endColumn":19},{"ruleId":"91","severity":1,"message":"103","line":9,"column":10,"nodeType":"93","messageId":"94","endLine":9,"endColumn":15},{"ruleId":"91","severity":1,"message":"104","line":66,"column":9,"nodeType":"93","messageId":"94","endLine":66,"endColumn":26},{"ruleId":"91","severity":1,"message":"105","line":1,"column":8,"nodeType":"93","messageId":"94","endLine":1,"endColumn":18},{"ruleId":"91","severity":1,"message":"106","line":5,"column":8,"nodeType":"93","messageId":"94","endLine":5,"endColumn":17},{"ruleId":"91","severity":1,"message":"107","line":26,"column":10,"nodeType":"93","messageId":"94","endLine":26,"endColumn":19},{"ruleId":"91","severity":1,"message":"108","line":26,"column":21,"nodeType":"93","messageId":"94","endLine":26,"endColumn":33},{"ruleId":"91","severity":1,"message":"109","line":27,"column":24,"nodeType":"93","messageId":"94","endLine":27,"endColumn":39},{"ruleId":"110","severity":1,"message":"111","line":56,"column":6,"nodeType":"112","endLine":56,"endColumn":8,"suggestions":"113"},{"ruleId":"91","severity":1,"message":"114","line":1,"column":10,"nodeType":"93","messageId":"94","endLine":1,"endColumn":19},{"ruleId":"91","severity":1,"message":"115","line":1,"column":21,"nodeType":"93","messageId":"94","endLine":1,"endColumn":29},{"ruleId":"91","severity":1,"message":"116","line":7,"column":9,"nodeType":"93","messageId":"94","endLine":7,"endColumn":17},"no-unused-vars","'CreatSocketConnection' is defined but never used.","Identifier","unusedVar","'SUCCESS' is assigned a value but never used.","'ERROR' is assigned a value but never used.","'payload' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'startTrade' is assigned a value but never used.","'items' is assigned a value but never used.","'handleInputChange' is assigned a value but never used.","'ApexCharts' is defined but never used.","'ChartDraw' is defined but never used.","'isLoading' is assigned a value but never used.","'setIsLoading' is assigned a value but never used.","'setLoadingError' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'asyncTest'. Either include it or remove the dependency array.","ArrayExpression",["117"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'response' is assigned a value but never used.",{"desc":"118","fix":"119"},"Update the dependencies array to be: [asyncTest]",{"range":"120","text":"121"},[1477,1479],"[asyncTest]"]