{"ast":null,"code":"import { useState } from \"react\"; // let socket; // 소켓\n// 웹소켓 연결\n\nconst creatSocketConnection = (type, conncectType, dataMaker) => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`;\n  return () => (dispatch, getState) => {\n    let socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n    socket.binaryType = \"arraybuffer\"; //socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n    //socket.binaryType = \"arraybuffer\";\n\n    socket.onopen = () => {\n      socket.send(JSON.stringify([{\n        ticket: \"UNIQUE_TICKET\"\n      }, {\n        type: \"ticker\",\n        codes: [\"KRW-BTC\"]\n      }, // \"KRW-BTC\",\"KRW-ETH\" -> parsing\n      {\n        type: \"orderbook\",\n        codes: [\"KRW-BTC\"]\n      }, {\n        type: \"trade\",\n        codes: [\"KRW-BTC\"]\n      }]));\n    };\n\n    socket.onclose = function (e) {\n      socket = undefined;\n    };\n\n    socket.onmessage = e => {\n      console.log(\"?\");\n      var enc = new TextDecoder(\"utf-8\");\n      var arr = new Uint8Array(e.data);\n      var str_d = enc.decode(arr);\n      var d = JSON.parse(str_d);\n      const state = getState();\n\n      if (d.type == \"ticker\") {\n        dispatch({\n          type: SUCCESS,\n          payload: state\n        }); // 현재가 데이터\n        // TOD\n\n        console.log(\"yay\");\n      }\n\n      if (d.type == \"orderbook\") {// 호가 데이터\n        // TODO\n      }\n\n      if (d.type == \"trade\") {// 체결 데이터\n        // TODO\n      }\n    };\n\n    socket.onerror = e => {\n      dispatch({\n        type: ERROR,\n        payload: e\n      });\n    };\n  };\n}; // function ConnectWS() {\n//   const [ticker, setTicker] = useState(0);\n//   const onChangeTicker = (event) => setTicker(event.target.value);\n//   //   if (socket != undefined) {\n//   //     socket.close();\n//   //   }\n// }\n// // 웹소켓 연결 해제\n// function closeWS() {\n//   if (socket != undefined) {\n//     socket.close();\n//     socket = undefined;\n//   }\n// }\n// // 웹소켓 요청\n// function filterRequest(filter) {\n//   if (socket == undefined) {\n//     alert(\"no connect exists\");\n//     return;\n//   }\n//   socket.send(filter);\n// }\n//ConnectWS();\n// function sendMessage({}) {\n//   return;\n// }\n\n\nexport default creatSocketConnection;","map":{"version":3,"names":["useState","creatSocketConnection","type","conncectType","dataMaker","SUCCESS","ERROR","dispatch","getState","socket","WebSocket","binaryType","onopen","send","JSON","stringify","ticket","codes","onclose","e","undefined","onmessage","console","log","enc","TextDecoder","arr","Uint8Array","data","str_d","decode","d","parse","state","payload","onerror"],"sources":["/Users/ys/Documents/grid-trading/src/connect.js"],"sourcesContent":["import { useState } from \"react\";\n\n// let socket; // 소켓\n\n// 웹소켓 연결\nconst creatSocketConnection = (type, conncectType, dataMaker) => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`;\n\n  return () => (dispatch, getState) => {\n    let socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n    socket.binaryType = \"arraybuffer\";\n\n    //socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n    //socket.binaryType = \"arraybuffer\";\n\n    socket.onopen = () => {\n      socket.send(\n        JSON.stringify([\n          { ticket: \"UNIQUE_TICKET\" },\n          { type: \"ticker\", codes: [\"KRW-BTC\"] }, // \"KRW-BTC\",\"KRW-ETH\" -> parsing\n          { type: \"orderbook\", codes: [\"KRW-BTC\"] },\n          { type: \"trade\", codes: [\"KRW-BTC\"] },\n        ])\n      );\n    };\n    socket.onclose = function (e) {\n      socket = undefined;\n    };\n    socket.onmessage = (e) => {\n      console.log(\"?\");\n      var enc = new TextDecoder(\"utf-8\");\n      var arr = new Uint8Array(e.data);\n      var str_d = enc.decode(arr);\n      var d = JSON.parse(str_d);\n      const state = getState();\n      if (d.type == \"ticker\") {\n        dispatch({ type: SUCCESS, payload: state });\n        // 현재가 데이터\n        // TOD\n        console.log(\"yay\");\n      }\n      if (d.type == \"orderbook\") {\n        // 호가 데이터\n        // TODO\n      }\n      if (d.type == \"trade\") {\n        // 체결 데이터\n        // TODO\n      }\n    };\n    socket.onerror = (e) => {\n      dispatch({ type: ERROR, payload: e });\n    };\n  };\n};\n// function ConnectWS() {\n//   const [ticker, setTicker] = useState(0);\n//   const onChangeTicker = (event) => setTicker(event.target.value);\n//   //   if (socket != undefined) {\n//   //     socket.close();\n//   //   }\n// }\n// // 웹소켓 연결 해제\n// function closeWS() {\n//   if (socket != undefined) {\n//     socket.close();\n//     socket = undefined;\n//   }\n// }\n\n// // 웹소켓 요청\n// function filterRequest(filter) {\n//   if (socket == undefined) {\n//     alert(\"no connect exists\");\n//     return;\n//   }\n//   socket.send(filter);\n// }\n\n//ConnectWS();\n\n// function sendMessage({}) {\n//   return;\n// }\n\nexport default creatSocketConnection;\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB,C,CAEA;AAEA;;AACA,MAAMC,qBAAqB,GAAG,CAACC,IAAD,EAAOC,YAAP,EAAqBC,SAArB,KAAmC;EAC/D,MAAMC,OAAO,GAAI,GAAEH,IAAK,UAAxB;EACA,MAAMI,KAAK,GAAI,GAAEJ,IAAK,QAAtB;EAEA,OAAO,MAAM,CAACK,QAAD,EAAWC,QAAX,KAAwB;IACnC,IAAIC,MAAM,GAAG,IAAIC,SAAJ,CAAc,kCAAd,CAAb;IACAD,MAAM,CAACE,UAAP,GAAoB,aAApB,CAFmC,CAInC;IACA;;IAEAF,MAAM,CAACG,MAAP,GAAgB,MAAM;MACpBH,MAAM,CAACI,IAAP,CACEC,IAAI,CAACC,SAAL,CAAe,CACb;QAAEC,MAAM,EAAE;MAAV,CADa,EAEb;QAAEd,IAAI,EAAE,QAAR;QAAkBe,KAAK,EAAE,CAAC,SAAD;MAAzB,CAFa,EAE2B;MACxC;QAAEf,IAAI,EAAE,WAAR;QAAqBe,KAAK,EAAE,CAAC,SAAD;MAA5B,CAHa,EAIb;QAAEf,IAAI,EAAE,OAAR;QAAiBe,KAAK,EAAE,CAAC,SAAD;MAAxB,CAJa,CAAf,CADF;IAQD,CATD;;IAUAR,MAAM,CAACS,OAAP,GAAiB,UAAUC,CAAV,EAAa;MAC5BV,MAAM,GAAGW,SAAT;IACD,CAFD;;IAGAX,MAAM,CAACY,SAAP,GAAoBF,CAAD,IAAO;MACxBG,OAAO,CAACC,GAAR,CAAY,GAAZ;MACA,IAAIC,GAAG,GAAG,IAAIC,WAAJ,CAAgB,OAAhB,CAAV;MACA,IAAIC,GAAG,GAAG,IAAIC,UAAJ,CAAeR,CAAC,CAACS,IAAjB,CAAV;MACA,IAAIC,KAAK,GAAGL,GAAG,CAACM,MAAJ,CAAWJ,GAAX,CAAZ;MACA,IAAIK,CAAC,GAAGjB,IAAI,CAACkB,KAAL,CAAWH,KAAX,CAAR;MACA,MAAMI,KAAK,GAAGzB,QAAQ,EAAtB;;MACA,IAAIuB,CAAC,CAAC7B,IAAF,IAAU,QAAd,EAAwB;QACtBK,QAAQ,CAAC;UAAEL,IAAI,EAAEG,OAAR;UAAiB6B,OAAO,EAAED;QAA1B,CAAD,CAAR,CADsB,CAEtB;QACA;;QACAX,OAAO,CAACC,GAAR,CAAY,KAAZ;MACD;;MACD,IAAIQ,CAAC,CAAC7B,IAAF,IAAU,WAAd,EAA2B,CACzB;QACA;MACD;;MACD,IAAI6B,CAAC,CAAC7B,IAAF,IAAU,OAAd,EAAuB,CACrB;QACA;MACD;IACF,CArBD;;IAsBAO,MAAM,CAAC0B,OAAP,GAAkBhB,CAAD,IAAO;MACtBZ,QAAQ,CAAC;QAAEL,IAAI,EAAEI,KAAR;QAAe4B,OAAO,EAAEf;MAAxB,CAAD,CAAR;IACD,CAFD;EAGD,CA7CD;AA8CD,CAlDD,C,CAmDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;AAEA,eAAelB,qBAAf"},"metadata":{},"sourceType":"module"}