{"ast":null,"code":"import { useState } from \"react\"; // let socket; // 소켓\n// 웹소켓 연결\n\nconst creatSocketConnection = (type, conncectType, dataMaker) => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`;\n  return function () {\n    let action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return (dispatch, getState) => {\n      let socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n      socket.binaryType = \"arraybuffer\"; //socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n      //socket.binaryType = \"arraybuffer\";\n\n      socket.onopen = () => {\n        socket.send(JSON.stringify([{\n          ticket: \"UNIQUE_TICKET\"\n        }, {\n          type: \"ticker\",\n          codes: [\"KRW-BTC\"]\n        }, // \"KRW-BTC\",\"KRW-ETH\" -> parsing\n        {\n          type: \"orderbook\",\n          codes: [\"KRW-BTC\"]\n        }, {\n          type: \"trade\",\n          codes: [\"KRW-BTC\"]\n        }]));\n      };\n\n      socket.onclose = function (e) {\n        socket = undefined;\n      };\n\n      socket.onmessage = e => {\n        var enc = new TextDecoder(\"utf-8\");\n        var arr = new Uint8Array(e.data);\n        var str_d = enc.decode(arr);\n        var d = JSON.parse(str_d);\n        const state = getState();\n\n        if (d.type == \"ticker\") {\n          dispatch({\n            type: SUCCESS,\n            payload: state\n          }); // 현재가 데이터\n          // TOD\n\n          console.log(\"yay\");\n        }\n\n        if (d.type == \"orderbook\") {// 호가 데이터\n          // TODO\n        }\n\n        if (d.type == \"trade\") {// 체결 데이터\n          // TODO\n        }\n      };\n\n      socket.onerror = e => {\n        dispatch({\n          type: Error,\n          payload: e\n        });\n      };\n    };\n  };\n}; // function ConnectWS() {\n//   const [ticker, setTicker] = useState(0);\n//   const onChangeTicker = (event) => setTicker(event.target.value);\n//   //   if (socket != undefined) {\n//   //     socket.close();\n//   //   }\n// }\n// // 웹소켓 연결 해제\n// function closeWS() {\n//   if (socket != undefined) {\n//     socket.close();\n//     socket = undefined;\n//   }\n// }\n// // 웹소켓 요청\n// function filterRequest(filter) {\n//   if (socket == undefined) {\n//     alert(\"no connect exists\");\n//     return;\n//   }\n//   socket.send(filter);\n// }\n//ConnectWS();\n// function sendMessage({}) {\n//   return;\n// }\n\n\nexport default creatSocketConnection;","map":{"version":3,"names":["useState","creatSocketConnection","type","conncectType","dataMaker","SUCCESS","ERROR","action","dispatch","getState","socket","WebSocket","binaryType","onopen","send","JSON","stringify","ticket","codes","onclose","e","undefined","onmessage","enc","TextDecoder","arr","Uint8Array","data","str_d","decode","d","parse","state","payload","console","log","onerror","Error"],"sources":["/Users/ys/Documents/grid-trading/src/connect.js"],"sourcesContent":["import { useState } from \"react\";\n\n// let socket; // 소켓\n\n// 웹소켓 연결\nconst creatSocketConnection = (type, conncectType, dataMaker) => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`;\n\n  return (action = {}) =>\n    (dispatch, getState) => {\n      let socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n      socket.binaryType = \"arraybuffer\";\n\n      //socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n      //socket.binaryType = \"arraybuffer\";\n\n      socket.onopen = () => {\n        socket.send(\n          JSON.stringify([\n            { ticket: \"UNIQUE_TICKET\" },\n            { type: \"ticker\", codes: [\"KRW-BTC\"] }, // \"KRW-BTC\",\"KRW-ETH\" -> parsing\n            { type: \"orderbook\", codes: [\"KRW-BTC\"] },\n            { type: \"trade\", codes: [\"KRW-BTC\"] },\n          ])\n        );\n      };\n      socket.onclose = function (e) {\n        socket = undefined;\n      };\n      socket.onmessage = (e) => {\n        var enc = new TextDecoder(\"utf-8\");\n        var arr = new Uint8Array(e.data);\n        var str_d = enc.decode(arr);\n        var d = JSON.parse(str_d);\n        const state = getState();\n        if (d.type == \"ticker\") {\n          dispatch({ type: SUCCESS, payload: state });\n          // 현재가 데이터\n          // TOD\n          console.log(\"yay\");\n        }\n        if (d.type == \"orderbook\") {\n          // 호가 데이터\n          // TODO\n        }\n        if (d.type == \"trade\") {\n          // 체결 데이터\n          // TODO\n        }\n      };\n      socket.onerror = (e) => {\n        dispatch({ type: Error, payload: e });\n      };\n    };\n};\n// function ConnectWS() {\n//   const [ticker, setTicker] = useState(0);\n//   const onChangeTicker = (event) => setTicker(event.target.value);\n//   //   if (socket != undefined) {\n//   //     socket.close();\n//   //   }\n// }\n// // 웹소켓 연결 해제\n// function closeWS() {\n//   if (socket != undefined) {\n//     socket.close();\n//     socket = undefined;\n//   }\n// }\n\n// // 웹소켓 요청\n// function filterRequest(filter) {\n//   if (socket == undefined) {\n//     alert(\"no connect exists\");\n//     return;\n//   }\n//   socket.send(filter);\n// }\n\n//ConnectWS();\n\n// function sendMessage({}) {\n//   return;\n// }\n\nexport default creatSocketConnection;\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB,C,CAEA;AAEA;;AACA,MAAMC,qBAAqB,GAAG,CAACC,IAAD,EAAOC,YAAP,EAAqBC,SAArB,KAAmC;EAC/D,MAAMC,OAAO,GAAI,GAAEH,IAAK,UAAxB;EACA,MAAMI,KAAK,GAAI,GAAEJ,IAAK,QAAtB;EAEA,OAAO;IAAA,IAACK,MAAD,uEAAU,EAAV;IAAA,OACL,CAACC,QAAD,EAAWC,QAAX,KAAwB;MACtB,IAAIC,MAAM,GAAG,IAAIC,SAAJ,CAAc,kCAAd,CAAb;MACAD,MAAM,CAACE,UAAP,GAAoB,aAApB,CAFsB,CAItB;MACA;;MAEAF,MAAM,CAACG,MAAP,GAAgB,MAAM;QACpBH,MAAM,CAACI,IAAP,CACEC,IAAI,CAACC,SAAL,CAAe,CACb;UAAEC,MAAM,EAAE;QAAV,CADa,EAEb;UAAEf,IAAI,EAAE,QAAR;UAAkBgB,KAAK,EAAE,CAAC,SAAD;QAAzB,CAFa,EAE2B;QACxC;UAAEhB,IAAI,EAAE,WAAR;UAAqBgB,KAAK,EAAE,CAAC,SAAD;QAA5B,CAHa,EAIb;UAAEhB,IAAI,EAAE,OAAR;UAAiBgB,KAAK,EAAE,CAAC,SAAD;QAAxB,CAJa,CAAf,CADF;MAQD,CATD;;MAUAR,MAAM,CAACS,OAAP,GAAiB,UAAUC,CAAV,EAAa;QAC5BV,MAAM,GAAGW,SAAT;MACD,CAFD;;MAGAX,MAAM,CAACY,SAAP,GAAoBF,CAAD,IAAO;QACxB,IAAIG,GAAG,GAAG,IAAIC,WAAJ,CAAgB,OAAhB,CAAV;QACA,IAAIC,GAAG,GAAG,IAAIC,UAAJ,CAAeN,CAAC,CAACO,IAAjB,CAAV;QACA,IAAIC,KAAK,GAAGL,GAAG,CAACM,MAAJ,CAAWJ,GAAX,CAAZ;QACA,IAAIK,CAAC,GAAGf,IAAI,CAACgB,KAAL,CAAWH,KAAX,CAAR;QACA,MAAMI,KAAK,GAAGvB,QAAQ,EAAtB;;QACA,IAAIqB,CAAC,CAAC5B,IAAF,IAAU,QAAd,EAAwB;UACtBM,QAAQ,CAAC;YAAEN,IAAI,EAAEG,OAAR;YAAiB4B,OAAO,EAAED;UAA1B,CAAD,CAAR,CADsB,CAEtB;UACA;;UACAE,OAAO,CAACC,GAAR,CAAY,KAAZ;QACD;;QACD,IAAIL,CAAC,CAAC5B,IAAF,IAAU,WAAd,EAA2B,CACzB;UACA;QACD;;QACD,IAAI4B,CAAC,CAAC5B,IAAF,IAAU,OAAd,EAAuB,CACrB;UACA;QACD;MACF,CApBD;;MAqBAQ,MAAM,CAAC0B,OAAP,GAAkBhB,CAAD,IAAO;QACtBZ,QAAQ,CAAC;UAAEN,IAAI,EAAEmC,KAAR;UAAeJ,OAAO,EAAEb;QAAxB,CAAD,CAAR;MACD,CAFD;IAGD,CA7CI;EAAA,CAAP;AA8CD,CAlDD,C,CAmDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;AAEA,eAAenB,qBAAf"},"metadata":{},"sourceType":"module"}