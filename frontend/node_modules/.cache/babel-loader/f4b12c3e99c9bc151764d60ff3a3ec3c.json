{"ast":null,"code":"var _jsxFileName = \"/Users/ys/Documents/grid-trading/src/connect.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\"; // let socket; // 소켓\n// 웹소켓 연결\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CreatSocketConnection(type, conncectType, dataMaker) {\n  _s();\n\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`;\n  let payload = 0;\n  const [data, setData] = useState(\"\");\n  let socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n  socket.binaryType = \"arraybuffer\";\n\n  socket.onopen = () => {\n    //console.log(\"?\");\n    socket.send(JSON.stringify([{\n      ticket: \"UNIQUE_TICKET\"\n    }, {\n      type: \"ticker\",\n      codes: [\"KRW-BTC\"]\n    }, // \"KRW-BTC\",\"KRW-ETH\" -> parsing\n    {\n      type: \"orderbook\",\n      codes: [\"KRW-BTC\"]\n    }, {\n      type: \"trade\",\n      codes: [\"KRW-BTC\"]\n    }]));\n  };\n\n  socket.onmessage = e => {\n    //console.log(\"message\");\n    var enc = new TextDecoder(\"utf-8\");\n    var arr = new Uint8Array(e.data);\n    var str_d = enc.decode(arr);\n    var d = JSON.parse(str_d);\n\n    if (d.type === \"ticker\") {\n      // 현재가 데이터\n      setData(d.trade_price); // TOD\n      //console.log(d.opening_price);\n      // payload = d.opening_price;\n    }\n\n    if (d.type == \"orderbook\") {// 호가 데이터\n      // TODO\n    }\n\n    if (d.type == \"trade\") {// 체결 데이터\n      // TODO\n    }\n  };\n\n  socket.onerror = e => {\n    console.log(e);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n} //   return () => (dispatch, getState) => {\n//     let socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n//     socket.binaryType = \"arraybuffer\";\n//     //socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n//     //socket.binaryType = \"arraybuffer\";\n//     socket.onopen = () => {\n//       console.log(\"?\");\n//       socket.send(\n//         JSON.stringify([\n//           { ticket: \"UNIQUE_TICKET\" },\n//           { type: \"ticker\", codes: [\"KRW-BTC\"] }, // \"KRW-BTC\",\"KRW-ETH\" -> parsing\n//           { type: \"orderbook\", codes: [\"KRW-BTC\"] },\n//           { type: \"trade\", codes: [\"KRW-BTC\"] },\n//         ])\n//       );\n//     };\n//     socket.onclose = function (e) {\n//       socket = undefined;\n//     };\n//     socket.onmessage = (e) => {\n//       console.log(\"?\");\n//       var enc = new TextDecoder(\"utf-8\");\n//       var arr = new Uint8Array(e.data);\n//       var str_d = enc.decode(arr);\n//       var d = JSON.parse(str_d);\n//       const state = getState();\n//       if (d.type == \"ticker\") {\n//         dispatch({ type: SUCCESS, payload: state });\n//         // 현재가 데이터\n//         // TOD\n//         console.log(\"yay\");\n//       }\n//       if (d.type == \"orderbook\") {\n//         // 호가 데이터\n//         // TODO\n//       }\n//       if (d.type == \"trade\") {\n//         // 체결 데이터\n//         // TODO\n//       }\n//     };\n//     socket.onerror = (e) => {\n//       dispatch({ type: ERROR, payload: e });\n//     };\n//   };\n// function closeWS() {\n//   if (socket != undefined) {\n//     socket.close();\n//     socket = undefined;\n//   }\n// }\n\n\n_s(CreatSocketConnection, \"avaWeDctHFwWP+lC5+N1mkv/uq8=\");\n\n_c = CreatSocketConnection;\nexport default CreatSocketConnection;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreatSocketConnection\");","map":{"version":3,"names":["useState","CreatSocketConnection","type","conncectType","dataMaker","SUCCESS","ERROR","payload","data","setData","socket","WebSocket","binaryType","onopen","send","JSON","stringify","ticket","codes","onmessage","e","enc","TextDecoder","arr","Uint8Array","str_d","decode","d","parse","trade_price","onerror","console","log"],"sources":["/Users/ys/Documents/grid-trading/src/connect.js"],"sourcesContent":["import { useState } from \"react\";\n\n// let socket; // 소켓\n\n// 웹소켓 연결\nfunction CreatSocketConnection(type, conncectType, dataMaker) {\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`;\n  let payload = 0;\n  const [data, setData] = useState(\"\");\n  let socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n  socket.binaryType = \"arraybuffer\";\n\n  socket.onopen = () => {\n    //console.log(\"?\");\n    socket.send(\n      JSON.stringify([\n        { ticket: \"UNIQUE_TICKET\" },\n        { type: \"ticker\", codes: [\"KRW-BTC\"] }, // \"KRW-BTC\",\"KRW-ETH\" -> parsing\n        { type: \"orderbook\", codes: [\"KRW-BTC\"] },\n        { type: \"trade\", codes: [\"KRW-BTC\"] },\n      ])\n    );\n  };\n\n  socket.onmessage = (e) => {\n    //console.log(\"message\");\n    var enc = new TextDecoder(\"utf-8\");\n    var arr = new Uint8Array(e.data);\n    var str_d = enc.decode(arr);\n    var d = JSON.parse(str_d);\n    if (d.type === \"ticker\") {\n      // 현재가 데이터\n      setData(d.trade_price);\n      // TOD\n      //console.log(d.opening_price);\n      // payload = d.opening_price;\n    }\n    if (d.type == \"orderbook\") {\n      // 호가 데이터\n      // TODO\n    }\n    if (d.type == \"trade\") {\n      // 체결 데이터\n      // TODO\n    }\n  };\n  socket.onerror = (e) => {\n    console.log(e);\n  };\n  return (\n    <div>\n      <h1>{data}</h1>\n    </div>\n  );\n}\n\n//   return () => (dispatch, getState) => {\n//     let socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n//     socket.binaryType = \"arraybuffer\";\n\n//     //socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n//     //socket.binaryType = \"arraybuffer\";\n\n//     socket.onopen = () => {\n//       console.log(\"?\");\n//       socket.send(\n//         JSON.stringify([\n//           { ticket: \"UNIQUE_TICKET\" },\n//           { type: \"ticker\", codes: [\"KRW-BTC\"] }, // \"KRW-BTC\",\"KRW-ETH\" -> parsing\n//           { type: \"orderbook\", codes: [\"KRW-BTC\"] },\n//           { type: \"trade\", codes: [\"KRW-BTC\"] },\n//         ])\n//       );\n//     };\n\n//     socket.onclose = function (e) {\n//       socket = undefined;\n//     };\n\n//     socket.onmessage = (e) => {\n//       console.log(\"?\");\n//       var enc = new TextDecoder(\"utf-8\");\n//       var arr = new Uint8Array(e.data);\n//       var str_d = enc.decode(arr);\n//       var d = JSON.parse(str_d);\n//       const state = getState();\n//       if (d.type == \"ticker\") {\n//         dispatch({ type: SUCCESS, payload: state });\n//         // 현재가 데이터\n//         // TOD\n//         console.log(\"yay\");\n//       }\n//       if (d.type == \"orderbook\") {\n//         // 호가 데이터\n//         // TODO\n//       }\n//       if (d.type == \"trade\") {\n//         // 체결 데이터\n//         // TODO\n//       }\n//     };\n//     socket.onerror = (e) => {\n//       dispatch({ type: ERROR, payload: e });\n//     };\n//   };\n\n// function closeWS() {\n//   if (socket != undefined) {\n//     socket.close();\n//     socket = undefined;\n//   }\n// }\n\nexport default CreatSocketConnection;\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB,C,CAEA;AAEA;;;;AACA,SAASC,qBAAT,CAA+BC,IAA/B,EAAqCC,YAArC,EAAmDC,SAAnD,EAA8D;EAAA;;EAC5D,MAAMC,OAAO,GAAI,GAAEH,IAAK,UAAxB;EACA,MAAMI,KAAK,GAAI,GAAEJ,IAAK,QAAtB;EACA,IAAIK,OAAO,GAAG,CAAd;EACA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;EACA,IAAIU,MAAM,GAAG,IAAIC,SAAJ,CAAc,kCAAd,CAAb;EACAD,MAAM,CAACE,UAAP,GAAoB,aAApB;;EAEAF,MAAM,CAACG,MAAP,GAAgB,MAAM;IACpB;IACAH,MAAM,CAACI,IAAP,CACEC,IAAI,CAACC,SAAL,CAAe,CACb;MAAEC,MAAM,EAAE;IAAV,CADa,EAEb;MAAEf,IAAI,EAAE,QAAR;MAAkBgB,KAAK,EAAE,CAAC,SAAD;IAAzB,CAFa,EAE2B;IACxC;MAAEhB,IAAI,EAAE,WAAR;MAAqBgB,KAAK,EAAE,CAAC,SAAD;IAA5B,CAHa,EAIb;MAAEhB,IAAI,EAAE,OAAR;MAAiBgB,KAAK,EAAE,CAAC,SAAD;IAAxB,CAJa,CAAf,CADF;EAQD,CAVD;;EAYAR,MAAM,CAACS,SAAP,GAAoBC,CAAD,IAAO;IACxB;IACA,IAAIC,GAAG,GAAG,IAAIC,WAAJ,CAAgB,OAAhB,CAAV;IACA,IAAIC,GAAG,GAAG,IAAIC,UAAJ,CAAeJ,CAAC,CAACZ,IAAjB,CAAV;IACA,IAAIiB,KAAK,GAAGJ,GAAG,CAACK,MAAJ,CAAWH,GAAX,CAAZ;IACA,IAAII,CAAC,GAAGZ,IAAI,CAACa,KAAL,CAAWH,KAAX,CAAR;;IACA,IAAIE,CAAC,CAACzB,IAAF,KAAW,QAAf,EAAyB;MACvB;MACAO,OAAO,CAACkB,CAAC,CAACE,WAAH,CAAP,CAFuB,CAGvB;MACA;MACA;IACD;;IACD,IAAIF,CAAC,CAACzB,IAAF,IAAU,WAAd,EAA2B,CACzB;MACA;IACD;;IACD,IAAIyB,CAAC,CAACzB,IAAF,IAAU,OAAd,EAAuB,CACrB;MACA;IACD;EACF,CArBD;;EAsBAQ,MAAM,CAACoB,OAAP,GAAkBV,CAAD,IAAO;IACtBW,OAAO,CAACC,GAAR,CAAYZ,CAAZ;EACD,CAFD;;EAGA,oBACE;IAAA,uBACE;MAAA,UAAKZ;IAAL;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,C,CAED;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;GA3GSP,qB;;KAAAA,qB;AA6GT,eAAeA,qBAAf"},"metadata":{},"sourceType":"module"}