{"ast":null,"code":"import { useState } from \"react\"; // let socket; // 소켓\n// 웹소켓 연결\n\nfunction creatSocketConnection(type, conncectType, dataMaker) {\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`;\n  let socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n  socket.binaryType = \"arraybuffer\";\n\n  socket.onopen = () => {\n    console.log(\"?\");\n    socket.send(JSON.stringify([{\n      ticket: \"UNIQUE_TICKET\"\n    }, {\n      type: \"ticker\",\n      codes: [\"KRW-BTC\"]\n    }, // \"KRW-BTC\",\"KRW-ETH\" -> parsing\n    {\n      type: \"orderbook\",\n      codes: [\"KRW-BTC\"]\n    }, {\n      type: \"trade\",\n      codes: [\"KRW-BTC\"]\n    }]));\n  };\n\n  socket.onmessage = e => {\n    console.log(\"?\");\n    var enc = new TextDecoder(\"utf-8\");\n    var arr = new Uint8Array(e.data);\n    var str_d = enc.decode(arr);\n    var d = JSON.parse(str_d);\n\n    if (d.type == \"ticker\") {\n      // 현재가 데이터\n      // TOD\n      //console.log(d.opening_price);\n      return d.opening_price;\n    }\n\n    if (d.type == \"orderbook\") {// 호가 데이터\n      // TODO\n    }\n\n    if (d.type == \"trade\") {// 체결 데이터\n      // TODO\n    }\n  };\n\n  socket.onerror = e => {\n    console.log(e);\n  };\n\n  return 0; //   return () => (dispatch, getState) => {\n  //     let socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n  //     socket.binaryType = \"arraybuffer\";\n  //     //socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n  //     //socket.binaryType = \"arraybuffer\";\n  //     socket.onopen = () => {\n  //       console.log(\"?\");\n  //       socket.send(\n  //         JSON.stringify([\n  //           { ticket: \"UNIQUE_TICKET\" },\n  //           { type: \"ticker\", codes: [\"KRW-BTC\"] }, // \"KRW-BTC\",\"KRW-ETH\" -> parsing\n  //           { type: \"orderbook\", codes: [\"KRW-BTC\"] },\n  //           { type: \"trade\", codes: [\"KRW-BTC\"] },\n  //         ])\n  //       );\n  //     };\n  //     socket.onclose = function (e) {\n  //       socket = undefined;\n  //     };\n  //     socket.onmessage = (e) => {\n  //       console.log(\"?\");\n  //       var enc = new TextDecoder(\"utf-8\");\n  //       var arr = new Uint8Array(e.data);\n  //       var str_d = enc.decode(arr);\n  //       var d = JSON.parse(str_d);\n  //       const state = getState();\n  //       if (d.type == \"ticker\") {\n  //         dispatch({ type: SUCCESS, payload: state });\n  //         // 현재가 데이터\n  //         // TOD\n  //         console.log(\"yay\");\n  //       }\n  //       if (d.type == \"orderbook\") {\n  //         // 호가 데이터\n  //         // TODO\n  //       }\n  //       if (d.type == \"trade\") {\n  //         // 체결 데이터\n  //         // TODO\n  //       }\n  //     };\n  //     socket.onerror = (e) => {\n  //       dispatch({ type: ERROR, payload: e });\n  //     };\n  //   };\n} // function ConnectWS() {\n//   const [ticker, setTicker] = useState(0);\n//   const onChangeTicker = (event) => setTicker(event.target.value);\n//   //   if (socket != undefined) {\n//   //     socket.close();\n//   //   }\n// }\n// // 웹소켓 연결 해제\n// function closeWS() {\n//   if (socket != undefined) {\n//     socket.close();\n//     socket = undefined;\n//   }\n// }\n// // 웹소켓 요청\n// function filterRequest(filter) {\n//   if (socket == undefined) {\n//     alert(\"no connect exists\");\n//     return;\n//   }\n//   socket.send(filter);\n// }\n//ConnectWS();\n// function sendMessage({}) {\n//   return;\n// }\n\n\nexport default creatSocketConnection;","map":{"version":3,"names":["useState","creatSocketConnection","type","conncectType","dataMaker","SUCCESS","ERROR","socket","WebSocket","binaryType","onopen","console","log","send","JSON","stringify","ticket","codes","onmessage","e","enc","TextDecoder","arr","Uint8Array","data","str_d","decode","d","parse","opening_price","onerror"],"sources":["/Users/ys/Documents/grid-trading/src/connect.js"],"sourcesContent":["import { useState } from \"react\";\n\n// let socket; // 소켓\n\n// 웹소켓 연결\nfunction creatSocketConnection(type, conncectType, dataMaker) {\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`;\n\n  let socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n  socket.binaryType = \"arraybuffer\";\n\n  socket.onopen = () => {\n    console.log(\"?\");\n    socket.send(\n      JSON.stringify([\n        { ticket: \"UNIQUE_TICKET\" },\n        { type: \"ticker\", codes: [\"KRW-BTC\"] }, // \"KRW-BTC\",\"KRW-ETH\" -> parsing\n        { type: \"orderbook\", codes: [\"KRW-BTC\"] },\n        { type: \"trade\", codes: [\"KRW-BTC\"] },\n      ])\n    );\n  };\n\n  socket.onmessage = (e) => {\n    console.log(\"?\");\n    var enc = new TextDecoder(\"utf-8\");\n    var arr = new Uint8Array(e.data);\n    var str_d = enc.decode(arr);\n    var d = JSON.parse(str_d);\n    if (d.type == \"ticker\") {\n      // 현재가 데이터\n      // TOD\n      //console.log(d.opening_price);\n      return d.opening_price;\n    }\n    if (d.type == \"orderbook\") {\n      // 호가 데이터\n      // TODO\n    }\n    if (d.type == \"trade\") {\n      // 체결 데이터\n      // TODO\n    }\n  };\n  socket.onerror = (e) => {\n    console.log(e);\n  };\n  return 0;\n  //   return () => (dispatch, getState) => {\n  //     let socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n  //     socket.binaryType = \"arraybuffer\";\n\n  //     //socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n  //     //socket.binaryType = \"arraybuffer\";\n\n  //     socket.onopen = () => {\n  //       console.log(\"?\");\n  //       socket.send(\n  //         JSON.stringify([\n  //           { ticket: \"UNIQUE_TICKET\" },\n  //           { type: \"ticker\", codes: [\"KRW-BTC\"] }, // \"KRW-BTC\",\"KRW-ETH\" -> parsing\n  //           { type: \"orderbook\", codes: [\"KRW-BTC\"] },\n  //           { type: \"trade\", codes: [\"KRW-BTC\"] },\n  //         ])\n  //       );\n  //     };\n\n  //     socket.onclose = function (e) {\n  //       socket = undefined;\n  //     };\n\n  //     socket.onmessage = (e) => {\n  //       console.log(\"?\");\n  //       var enc = new TextDecoder(\"utf-8\");\n  //       var arr = new Uint8Array(e.data);\n  //       var str_d = enc.decode(arr);\n  //       var d = JSON.parse(str_d);\n  //       const state = getState();\n  //       if (d.type == \"ticker\") {\n  //         dispatch({ type: SUCCESS, payload: state });\n  //         // 현재가 데이터\n  //         // TOD\n  //         console.log(\"yay\");\n  //       }\n  //       if (d.type == \"orderbook\") {\n  //         // 호가 데이터\n  //         // TODO\n  //       }\n  //       if (d.type == \"trade\") {\n  //         // 체결 데이터\n  //         // TODO\n  //       }\n  //     };\n  //     socket.onerror = (e) => {\n  //       dispatch({ type: ERROR, payload: e });\n  //     };\n  //   };\n}\n// function ConnectWS() {\n//   const [ticker, setTicker] = useState(0);\n//   const onChangeTicker = (event) => setTicker(event.target.value);\n//   //   if (socket != undefined) {\n//   //     socket.close();\n//   //   }\n// }\n// // 웹소켓 연결 해제\n// function closeWS() {\n//   if (socket != undefined) {\n//     socket.close();\n//     socket = undefined;\n//   }\n// }\n\n// // 웹소켓 요청\n// function filterRequest(filter) {\n//   if (socket == undefined) {\n//     alert(\"no connect exists\");\n//     return;\n//   }\n//   socket.send(filter);\n// }\n\n//ConnectWS();\n\n// function sendMessage({}) {\n//   return;\n// }\n\nexport default creatSocketConnection;\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB,C,CAEA;AAEA;;AACA,SAASC,qBAAT,CAA+BC,IAA/B,EAAqCC,YAArC,EAAmDC,SAAnD,EAA8D;EAC5D,MAAMC,OAAO,GAAI,GAAEH,IAAK,UAAxB;EACA,MAAMI,KAAK,GAAI,GAAEJ,IAAK,QAAtB;EAEA,IAAIK,MAAM,GAAG,IAAIC,SAAJ,CAAc,kCAAd,CAAb;EACAD,MAAM,CAACE,UAAP,GAAoB,aAApB;;EAEAF,MAAM,CAACG,MAAP,GAAgB,MAAM;IACpBC,OAAO,CAACC,GAAR,CAAY,GAAZ;IACAL,MAAM,CAACM,IAAP,CACEC,IAAI,CAACC,SAAL,CAAe,CACb;MAAEC,MAAM,EAAE;IAAV,CADa,EAEb;MAAEd,IAAI,EAAE,QAAR;MAAkBe,KAAK,EAAE,CAAC,SAAD;IAAzB,CAFa,EAE2B;IACxC;MAAEf,IAAI,EAAE,WAAR;MAAqBe,KAAK,EAAE,CAAC,SAAD;IAA5B,CAHa,EAIb;MAAEf,IAAI,EAAE,OAAR;MAAiBe,KAAK,EAAE,CAAC,SAAD;IAAxB,CAJa,CAAf,CADF;EAQD,CAVD;;EAYAV,MAAM,CAACW,SAAP,GAAoBC,CAAD,IAAO;IACxBR,OAAO,CAACC,GAAR,CAAY,GAAZ;IACA,IAAIQ,GAAG,GAAG,IAAIC,WAAJ,CAAgB,OAAhB,CAAV;IACA,IAAIC,GAAG,GAAG,IAAIC,UAAJ,CAAeJ,CAAC,CAACK,IAAjB,CAAV;IACA,IAAIC,KAAK,GAAGL,GAAG,CAACM,MAAJ,CAAWJ,GAAX,CAAZ;IACA,IAAIK,CAAC,GAAGb,IAAI,CAACc,KAAL,CAAWH,KAAX,CAAR;;IACA,IAAIE,CAAC,CAACzB,IAAF,IAAU,QAAd,EAAwB;MACtB;MACA;MACA;MACA,OAAOyB,CAAC,CAACE,aAAT;IACD;;IACD,IAAIF,CAAC,CAACzB,IAAF,IAAU,WAAd,EAA2B,CACzB;MACA;IACD;;IACD,IAAIyB,CAAC,CAACzB,IAAF,IAAU,OAAd,EAAuB,CACrB;MACA;IACD;EACF,CApBD;;EAqBAK,MAAM,CAACuB,OAAP,GAAkBX,CAAD,IAAO;IACtBR,OAAO,CAACC,GAAR,CAAYO,CAAZ;EACD,CAFD;;EAGA,OAAO,CAAP,CA3C4D,CA4C5D;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACD,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;AAEA,eAAelB,qBAAf"},"metadata":{},"sourceType":"module"}