{"ast":null,"code":"var _jsxFileName = \"/Users/ys/Documents/grid-trading/src/ChartBox.js\",\n    _s = $RefreshSig$();\n\nimport ApexCharts from \"apexcharts\";\nimport { useEffect, useState } from \"react\";\nimport ReactApexChart from \"react-apexcharts\"; // import { ChartDraw } from \"./api\";\n\nimport ChartDraw from \"./api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst INITIAL_VALUES = {\n  random: {\n    candle_date_time_kst: \"2018-04-18T19:16:00\",\n    low_price: 90,\n    high_price: 100,\n    opening_price: 0,\n    trade_price: 70\n  }\n};\n\nfunction ChartBox() {\n  _s();\n\n  let initialValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_VALUES;\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingError, setLoadingError] = useState(null);\n  const [dataTest, setDataTest] = useState([{\n    initialValues\n  }]); // const options = { method: \"GET\", headers: { Accept: \"application/json\" } };\n  // fetch(\n  //   \"https://api.upbit.com/v1/candles/minutes/1?market=KRW-BTC&count=5\",\n  //   options\n  // )\n  //   .then((response) => response.json())\n  //   .then((response) => console.log(response))\n  //   .catch((err) => console.error(err));\n\n  const data = [{\n    time_close: \"2018-04-18T19:16:00\",\n    open: 8615000,\n    high: 8618000,\n    low: 8611000,\n    close: 8611000\n  }]; // const handleLoad = async () => {\n  //   let result;\n  //   try {\n  //     setLoadingError(null);\n  //     setIsLoading(true);\n  //     result = ChartDraw();\n  //   } catch (error) {\n  //     setLoadingError(error);\n  //     return;\n  //   } finally {\n  //     setIsLoading(false);\n  //   }\n  //   const { data_test } = await result;\n  //   console.log(data_test);\n  // };\n  // const handleLoadMore = () => {\n  //   handleLoad();\n  // };\n  // useEffect(() => {\n  //   handleLoad();\n  // }, []);\n\n  const asyncTest = async () => {\n    const options = {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\"\n      }\n    };\n    fetch(\"https://api.upbit.com/v1/candles/minutes/1?market=KRW-BTC&count=20\", options).then(response => response.json()).then(result => {\n      console.log(result);\n      setDataTest(result);\n    }).catch(err => console.error(err));\n  };\n\n  useEffect(() => {\n    asyncTest(); //const options = { method: \"GET\", headers: { Accept: \"application/json\" } };\n    // fetch(\n    //   \"https://api.upbit.com/v1/candles/minutes/1?market=KRW-BTC&count=4\",\n    //   options\n    // )\n    //   .then((response) => response.json())\n    //   .then((response) => setDataTest(response))\n    //   .catch((err) => console.error(err));\n    // console.log(dataTest);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: 550\n    },\n    children: [loadingError && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: loadingError.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(ReactApexChart, {\n      type: \"candlestick\",\n      options: {\n        chart: {\n          type: \"candlestick\",\n          width: 550\n        },\n        xaxis: {\n          type: \"datetime\",\n          categories: data === null || data === void 0 ? void 0 : data.map(price => price.time_close)\n        }\n      },\n      series: [{\n        data: dataTest === null || dataTest === void 0 ? void 0 : dataTest.map(price => {\n          return [Date.parse(price.candle_date_time_kst), price.opening_price, price.high_price, price.low_price, price.trade_price];\n        })\n      }]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChartBox, \"F3cuE7J8KhjInuBnwAaH8AtgFzY=\");\n\n_c = ChartBox;\nexport default ChartBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartBox\");","map":{"version":3,"names":["ApexCharts","useEffect","useState","ReactApexChart","ChartDraw","INITIAL_VALUES","random","candle_date_time_kst","low_price","high_price","opening_price","trade_price","ChartBox","initialValues","isLoading","setIsLoading","loadingError","setLoadingError","dataTest","setDataTest","data","time_close","open","high","low","close","asyncTest","options","method","headers","Accept","fetch","then","response","json","result","console","log","catch","err","error","width","message","chart","type","xaxis","categories","map","price","Date","parse"],"sources":["/Users/ys/Documents/grid-trading/src/ChartBox.js"],"sourcesContent":["import ApexCharts from \"apexcharts\";\nimport { useEffect, useState } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\n// import { ChartDraw } from \"./api\";\nimport ChartDraw from \"./api\";\n\nconst INITIAL_VALUES = {\n  random: {\n    candle_date_time_kst: \"2018-04-18T19:16:00\",\n    low_price: 90,\n    high_price: 100,\n    opening_price: 0,\n    trade_price: 70,\n  },\n};\n\nfunction ChartBox(initialValues = INITIAL_VALUES) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingError, setLoadingError] = useState(null);\n  const [dataTest, setDataTest] = useState([{ initialValues }]);\n  // const options = { method: \"GET\", headers: { Accept: \"application/json\" } };\n  // fetch(\n  //   \"https://api.upbit.com/v1/candles/minutes/1?market=KRW-BTC&count=5\",\n  //   options\n  // )\n  //   .then((response) => response.json())\n  //   .then((response) => console.log(response))\n  //   .catch((err) => console.error(err));\n\n  const data = [\n    {\n      time_close: \"2018-04-18T19:16:00\",\n      open: 8615000,\n      high: 8618000,\n      low: 8611000,\n      close: 8611000,\n    },\n  ];\n\n  // const handleLoad = async () => {\n  //   let result;\n  //   try {\n  //     setLoadingError(null);\n  //     setIsLoading(true);\n  //     result = ChartDraw();\n  //   } catch (error) {\n  //     setLoadingError(error);\n  //     return;\n  //   } finally {\n  //     setIsLoading(false);\n  //   }\n  //   const { data_test } = await result;\n  //   console.log(data_test);\n  // };\n\n  // const handleLoadMore = () => {\n  //   handleLoad();\n  // };\n\n  // useEffect(() => {\n  //   handleLoad();\n  // }, []);\n  const asyncTest = async () => {\n    const options = { method: \"GET\", headers: { Accept: \"application/json\" } };\n    fetch(\n      \"https://api.upbit.com/v1/candles/minutes/1?market=KRW-BTC&count=20\",\n      options\n    )\n      .then((response) => response.json())\n      .then((result) => {\n        console.log(result);\n        setDataTest(result);\n      })\n      .catch((err) => console.error(err));\n  };\n\n  useEffect(() => {\n    asyncTest();\n    //const options = { method: \"GET\", headers: { Accept: \"application/json\" } };\n\n    // fetch(\n    //   \"https://api.upbit.com/v1/candles/minutes/1?market=KRW-BTC&count=4\",\n    //   options\n    // )\n    //   .then((response) => response.json())\n    //   .then((response) => setDataTest(response))\n    //   .catch((err) => console.error(err));\n\n    // console.log(dataTest);\n  }, []);\n\n  return (\n    <div style={{ width: 550 }}>\n      {loadingError && <p>{loadingError.message}</p>}\n      <ReactApexChart\n        type=\"candlestick\"\n        options={{\n          chart: { type: \"candlestick\", width: 550 },\n          xaxis: {\n            type: \"datetime\",\n            categories: data?.map((price) => price.time_close),\n          },\n        }}\n        series={[\n          {\n            data: dataTest?.map((price) => {\n              return [\n                Date.parse(price.candle_date_time_kst),\n                price.opening_price,\n                price.high_price,\n                price.low_price,\n                price.trade_price,\n              ];\n            }),\n          },\n        ]}\n      />\n    </div>\n  );\n}\n\nexport default ChartBox;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}